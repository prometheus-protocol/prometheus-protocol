type UsageTracker = 
 service {
   add_approved_wasm_hash: (wasm_id: text) -> (Result);
   get_admin: () -> (principal) query;
   get_all_server_metrics: () ->
    (vec record {
           text;
           ServerMetricsShared;
         }) query;
   get_and_clear_logs: () -> (Result_1);
   get_app_metrics: (canister_id: principal) -> (opt AppMetrics) query;
   get_metrics_for_server: (wasm_id: text) -> (opt ServerMetricsShared) query;
   get_payout_canister: () -> (opt principal) query;
   is_wasm_hash_approved: (wasm_id: text) -> (bool) query;
   log_call: (stats: UsageStats) -> (Result);
   remove_approved_wasm_hash: (wasm_id: text) -> (Result);
   seed_log: (canister_id: principal, wasm_id: text, stats: UsageStats) ->
    (Result);
   set_payout_canister: (canister_id: principal) -> (Result);
   transfer_admin: (new_admin: principal) -> (Result);
 };
type UsageStats = 
 record {
   activity: vec CallerActivity;
   end_timestamp_ns: Time;
   start_timestamp_ns: Time;
 };
type Time = int;
type ServerMetricsShared = 
 record {
   invocations_by_tool: vec record {
                              text;
                              nat;
                            };
   invocations_by_user: vec record {
                              principal;
                              nat;
                            };
   total_invocations: nat;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec LogEntry;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type LogEntry = 
 record {
   canister_id: principal;
   stats: UsageStats;
   timestamp: Time;
   wasm_id: text;
 };
type CallerActivity = 
 record {
   call_count: nat;
   caller: principal;
   tool_id: text;
 };
type AppMetrics = 
 record {
   anonymous_invocations: nat;
   authenticated_unique_users: nat;
   total_invocations: nat;
   total_tools: nat;
 };
/// * The UsageTracker canister serves as a high-throughput logbook for the "Proof-of-Use" system.
///  * It accepts usage statistics from approved MCP server canisters and makes them available to a designated payout canister.
service : () -> UsageTracker

type UsageStats = 
 record {
   activity: vec CallerActivity;
   end_timestamp_ns: Time;
   start_timestamp_ns: Time;
 };
type UpgradeFinishedResult = 
 variant {
   Failed: record {
             nat;
             text;
           };
   InProgress: nat;
   Success: nat;
 };
type TreasuryError = 
 variant {
   LedgerTrap: text;
   NotOwner;
   TransferFailed: TransferError;
 };
type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: Timestamp;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type Timestamp = nat64;
type Time = int;
type Subaccount = blob;
type StreamingToken = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingToken;
                            };};
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingToken;
 };
type StreamingCallback = func (StreamingToken) ->
                          (opt StreamingCallbackResponse) query;
type Result_2 = 
 variant {
   err: text;
   ok;
 };
type Result_1 = 
 variant {
   err: TreasuryError;
   ok;
 };
type Result = 
 variant {
   err: TreasuryError;
   ok: nat;
 };
type McpServer = 
 service {
   /// * This function is called by the test suite. It instantiates an actor
   ///   * for the UsageTracker and calls its `log_call` method.
   call_tracker: (tracker_canister_id: principal, stats: UsageStats) ->
    (Result_2);
   /// * Creates a new API key. This API key is linked to the caller's principal.
   ///    * @param name A human-readable name for the key.
   ///    * @returns The raw, unhashed API key. THIS IS THE ONLY TIME IT WILL BE VISIBLE.
   create_my_api_key: (name: text, scopes: vec text) -> (text);
   /// Get the current owner of the canister.
   get_owner: () -> (principal) query;
   /// Get the canister's balance of a specific ICRC-1 token.
   get_treasury_balance: (ledger_id: principal) -> (nat);
   /// Handle incoming HTTP requests.
   http_request: (req: HttpRequest) -> (HttpResponse) query;
   /// Handle streaming callbacks for large HTTP responses.
   http_request_streaming_callback: (token: StreamingToken) ->
    (opt StreamingCallbackResponse) query;
   /// Handle incoming HTTP requests that modify state (e.g., POST).
   http_request_update: (req: HttpRequest) -> (HttpResponse);
   icrc120_upgrade_finished: () -> (UpgradeFinishedResult);
   /// List all API keys owned by the caller.
   ///    * @returns A list of API key metadata (but not the raw keys).
   list_my_api_keys: () -> (vec ApiKeyMetadata) query;
   /// Revoke (delete) an API key owned by the caller.
   ///    * @param key_id The ID of the key to revoke.
   ///    * @returns True if the key was found and revoked, false otherwise.
   revoke_my_api_key: (key_id: text) -> ();
   /// Set a new owner for the canister. Only the current owner can call this.
   set_owner: (new_owner: principal) -> (Result_1);
   /// Withdraw tokens from the canister's treasury to a specified destination.
   withdraw: (ledger_id: principal, amount: nat, destination: Destination) ->
    (Result);
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec Header;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
   upgrade: opt bool;
 };
type HttpRequest = 
 record {
   body: blob;
   certificate_version: opt nat16;
   headers: vec Header;
   method: text;
   url: text;
 };
type Header = 
 record {
   text;
   text;
 };
type HashedApiKey = text;
type Destination = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
type CallerActivity = 
 record {
   call_count: nat;
   caller: principal;
   tool_id: text;
 };
type ApiKeyMetadata = 
 record {
   hashed_key: HashedApiKey;
   info: ApiKeyInfo;
 };
type ApiKeyInfo = 
 record {
   created: Time;
   name: text;
   "principal": principal;
   scopes: vec text;
 };
service : (args: opt record {owner: opt principal;}) -> McpServer
